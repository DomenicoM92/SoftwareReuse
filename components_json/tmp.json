[{"path":"/Users/francescocalifano/Desktop/SoftwareReuse/src/api/../../repository/ZIPFileExample/src/com/javacodegeeks/core/util/zip/WriteToFileExample.java","type":"sourcecode","name":"Drew","version":"3","author":"Linda","domain":"Albert Osborn LLC","technology":"http://www.syvezamido.tv","description":"Distinctio. Amet, dolor cum quidem quia sed non consequatur.","notes":"Cupidatat a.","uri":"http://www.pynejefy.org.au","entrypoint":"Odit aut distinctio Recusandae Perferendis repellendus Saepe fugiat accusantium","content":"package com.javacodegeeks.core.util.zip;\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.Writer;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class WriteToFileExample {\r\n\r\n\tprivate static final String FILEPATH = \"C:\\\\Users\\\\nikos\\\\Desktop\\\\TestFiles\\\\testFile.txt\";\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tString str1 = \"abc\";\r\n\t\tString str2 = \"asdasfasfasfa\";\r\n\r\n\t\tList<String> list = new ArrayList<String>();\r\n\t\tlist.add(str1);\r\n\t\tlist.add(str2);\r\n\r\n\t\t// useBufferedFileOutPutStream(list, FILEPATH);\r\n\t\tuseFileOutPutStream(str1, FILEPATH);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Write a small string to a File - Use a FileWriter\r\n\t */\r\n\tpublic static void useFileWriter(String content, String filePath) {\r\n\t\tWriter writer = null;\r\n\r\n\t\ttry {\r\n\r\n\t\t\twriter = new FileWriter(filePath);\r\n\t\t\twriter.write(content);\r\n\r\n\t\t} catch (IOException e) {\r\n\r\n\t\t\tSystem.err.println(\"Error writing the file : \");\r\n\t\t\te.printStackTrace();\r\n\r\n\t\t} finally {\r\n\r\n\t\t\tif (writer != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twriter.close();\r\n\t\t\t\t} catch (IOException e) {\r\n\r\n\t\t\t\t\tSystem.err.println(\"Error closing the file : \");\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Write a big list of Strings to a file - Use a BufferedWriter\r\n\t */\r\n\tpublic static void useByfferedFileWriter(List<String> content,String filePath) {\r\n\r\n\t\tFile file = new File(filePath);\r\n\t\tWriter fileWriter = null;\r\n\t\tBufferedWriter bufferedWriter = null;\r\n\r\n\t\ttry {\r\n\r\n\t\t\tfileWriter = new FileWriter(file);\r\n\t\t\tbufferedWriter = new BufferedWriter(fileWriter);\r\n\r\n\t\t\t// Write the lines one by one\r\n\t\t\tfor (String line : content) {\r\n\t\t\t\tline += System.getProperty(\"line.separator\");\r\n\t\t\t\tbufferedWriter.write(line);\r\n\t\t\t\t// alternatively add bufferedWriter.newLine() to change line\r\n\t\t\t}\r\n\r\n\t\t} catch (IOException e) {\r\n\t\t\tSystem.err.println(\"Error writing the file : \");\r\n\t\t\te.printStackTrace();\r\n\t\t} finally {\r\n\r\n\t\t\tif (bufferedWriter != null && fileWriter != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tbufferedWriter.close();\r\n\t\t\t\t\tfileWriter.close();\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Write raw data to a small file - use FileOutPutStream\r\n\t */\r\n\tpublic static void useFileOutPutStream(String content, String filePath) {\r\n\r\n\t\tOutputStream outputStream = null;\r\n\r\n\t\ttry {\r\n\r\n\t\t\toutputStream = new FileOutputStream(new File(filePath));\r\n\t\t\toutputStream.write(content.getBytes(), 0, content.length());\r\n\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\tSystem.err.println(\"Error Opening the file : \");\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\tSystem.err.println(\"Error writing  the file : \");\r\n\t\t\te.printStackTrace();\r\n\t\t} finally {\r\n\r\n\t\t\tif (outputStream != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\toutputStream.close();\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Write raw data to a big file - use BufferedWriter\r\n\t */\r\n\tpublic static void useBufferedFileOutPutStream(List<String> content,\r\n\t\t\tString filePath) {\r\n\t\tWriter writer = null;\r\n\r\n\t\ttry {\r\n\r\n\t\t\t// Using OutputStreamWriter you don't have to convert the String to\r\n\t\t\t// byte[]\r\n\t\t\twriter = new BufferedWriter(new OutputStreamWriter(\r\n\t\t\t\t\tnew FileOutputStream(filePath), \"utf-8\"));\r\n\r\n\t\t\tfor (String line : content) {\r\n\t\t\t\tline += System.getProperty(\"line.separator\");\r\n\t\t\t\twriter.write(line);\r\n\t\t\t}\r\n\r\n\t\t} catch (IOException e) {\r\n\r\n\t\t} finally {\r\n\r\n\t\t\tif (writer != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twriter.close();\r\n\t\t\t\t} catch (Exception e) {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n"},{"path":"/Users/francescocalifano/Desktop/SoftwareReuse/src/api/../../repository/ZIPFileExample/src/com/javacodegeeks/core/util/zip/WriteToFileExample.java","type":"sourcecode","name":"Drew","version":"3","author":"Linda","domain":"Albert Osborn LLC","technology":"http://www.syvezamido.tv","description":"Distinctio. Amet, dolor cum quidem quia sed non consequatur.","notes":"Cupidatat a.","uri":"http://www.pynejefy.org.au","entrypoint":"Odit aut distinctio Recusandae Perferendis repellendus Saepe fugiat accusantium","content":"package com.javacodegeeks.core.util.zip;\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.Writer;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class WriteToFileExample {\r\n\r\n\tprivate static final String FILEPATH = \"C:\\\\Users\\\\nikos\\\\Desktop\\\\TestFiles\\\\testFile.txt\";\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tString str1 = \"abc\";\r\n\t\tString str2 = \"asdasfasfasfa\";\r\n\r\n\t\tList<String> list = new ArrayList<String>();\r\n\t\tlist.add(str1);\r\n\t\tlist.add(str2);\r\n\r\n\t\t// useBufferedFileOutPutStream(list, FILEPATH);\r\n\t\tuseFileOutPutStream(str1, FILEPATH);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Write a small string to a File - Use a FileWriter\r\n\t */\r\n\tpublic static void useFileWriter(String content, String filePath) {\r\n\t\tWriter writer = null;\r\n\r\n\t\ttry {\r\n\r\n\t\t\twriter = new FileWriter(filePath);\r\n\t\t\twriter.write(content);\r\n\r\n\t\t} catch (IOException e) {\r\n\r\n\t\t\tSystem.err.println(\"Error writing the file : \");\r\n\t\t\te.printStackTrace();\r\n\r\n\t\t} finally {\r\n\r\n\t\t\tif (writer != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twriter.close();\r\n\t\t\t\t} catch (IOException e) {\r\n\r\n\t\t\t\t\tSystem.err.println(\"Error closing the file : \");\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Write a big list of Strings to a file - Use a BufferedWriter\r\n\t */\r\n\tpublic static void useByfferedFileWriter(List<String> content,String filePath) {\r\n\r\n\t\tFile file = new File(filePath);\r\n\t\tWriter fileWriter = null;\r\n\t\tBufferedWriter bufferedWriter = null;\r\n\r\n\t\ttry {\r\n\r\n\t\t\tfileWriter = new FileWriter(file);\r\n\t\t\tbufferedWriter = new BufferedWriter(fileWriter);\r\n\r\n\t\t\t// Write the lines one by one\r\n\t\t\tfor (String line : content) {\r\n\t\t\t\tline += System.getProperty(\"line.separator\");\r\n\t\t\t\tbufferedWriter.write(line);\r\n\t\t\t\t// alternatively add bufferedWriter.newLine() to change line\r\n\t\t\t}\r\n\r\n\t\t} catch (IOException e) {\r\n\t\t\tSystem.err.println(\"Error writing the file : \");\r\n\t\t\te.printStackTrace();\r\n\t\t} finally {\r\n\r\n\t\t\tif (bufferedWriter != null && fileWriter != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tbufferedWriter.close();\r\n\t\t\t\t\tfileWriter.close();\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Write raw data to a small file - use FileOutPutStream\r\n\t */\r\n\tpublic static void useFileOutPutStream(String content, String filePath) {\r\n\r\n\t\tOutputStream outputStream = null;\r\n\r\n\t\ttry {\r\n\r\n\t\t\toutputStream = new FileOutputStream(new File(filePath));\r\n\t\t\toutputStream.write(content.getBytes(), 0, content.length());\r\n\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\tSystem.err.println(\"Error Opening the file : \");\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\tSystem.err.println(\"Error writing  the file : \");\r\n\t\t\te.printStackTrace();\r\n\t\t} finally {\r\n\r\n\t\t\tif (outputStream != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\toutputStream.close();\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Write raw data to a big file - use BufferedWriter\r\n\t */\r\n\tpublic static void useBufferedFileOutPutStream(List<String> content,\r\n\t\t\tString filePath) {\r\n\t\tWriter writer = null;\r\n\r\n\t\ttry {\r\n\r\n\t\t\t// Using OutputStreamWriter you don't have to convert the String to\r\n\t\t\t// byte[]\r\n\t\t\twriter = new BufferedWriter(new OutputStreamWriter(\r\n\t\t\t\t\tnew FileOutputStream(filePath), \"utf-8\"));\r\n\r\n\t\t\tfor (String line : content) {\r\n\t\t\t\tline += System.getProperty(\"line.separator\");\r\n\t\t\t\twriter.write(line);\r\n\t\t\t}\r\n\r\n\t\t} catch (IOException e) {\r\n\r\n\t\t} finally {\r\n\r\n\t\t\tif (writer != null) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twriter.close();\r\n\t\t\t\t} catch (Exception e) {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n"}]